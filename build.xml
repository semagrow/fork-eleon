<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="eleon" default="compile" basedir=".">

  <!-- Configuration properties -->
  <!-- ======================== -->

  <exec executable="cat"
	outputproperty="version" errorproperty="stderr"
	input="VERSION" />

  <property name="name"            value="eleon"/>
  <property name="vname"           value="${name}-${version}"/>

  <!-- Output file names and locations -->

  <property name="dist.name"       value="${vname}"/>
  <property name="dist.zip.name"   value="${vname}.zip"/>
  <property name="jarfile"         value="${name}.jar"/>
  <property name="srczipfile"      value="${vname}-src.zip"/>

  <property name="dist.dir"        value="dist/${dist.name}"/>
  <property name="dist.lib.dir"    value="${dist.dir}/lib"/>

  <!-- Source locations -->

  <property name="src.dir"         value="src"/>
  <property name="classes.dir"     value="classes"/>
  <property name="lib.dir"         value="lib"/>
  <property name="bat.dir"         value="scripts/eleon.bat"/>
  <property name="sh.dir"          value="scripts/eleon.sh"/>

  <!-- Different SWT lib is needed for each supported platform -->

  <fileset id="linux-libs" dir="${lib.dir}">
  	<include name="*.jar"/><include name="jena/*.jar"/>
  	<include name="swt-linux-x86_64/swt.jar"/>
  </fileset>

  <fileset id="macos-libs" dir="${lib.dir}">
	<include name="*.jar"/><include name="jena/*.jar"/>
	<include name="swt-macos-x86_64/swt.jar"/>
  </fileset>

  <fileset id="win-libs" dir="${lib.dir}">
	<include name="*.jar"/><include name="jena/*.jar"/>
	<include name="swt-win-x86_64/swt.jar"/>
  </fileset>

  <fileset id="linux-debug-libs" dir="${lib.dir}">
	<include name="*.jar"/><include name="jena/*.jar"/>
	<include name="swt-linux-x86_64/swt-debug.jar"/>
  </fileset>

  <fileset id="macos-debug-libs" dir="${lib.dir}">
	<include name="*.jar"/><include name="jena/*.jar"/>
	<include name="swt-macos-x86_64/swt-debug.jar"/>
  </fileset>

  <fileset id="win-debug-libs" dir="${lib.dir}">
	<include name="*.jar"/><include name="jena/*.jar"/>
	<include name="swt-win-x86_64/swt-debug.jar"/>
  </fileset>

  <path id="linux-classpath">
	<fileset refid="linux-libs"/>
  </path>


	

  <!-- Primary externally visible targets -->
  <!-- ================================== -->

  <target name="compile"
		description="Compile the source tree into class files under ${classes.dir}">
	<mkdir dir="${classes.dir}" />
    <javac
       srcdir="${src.dir}"
       destdir="${classes.dir}"
       debug="${java.debug}"
       debuglevel="${java.debuglevel}"
       deprecation="${java.deprecation}"
       optimize="${java.optimize}">
      <classpath refid="classpath" />
      <include name="**/*.java"/>
      <exclude name="gr/demokritos/iit/eleon/authoring/**"/>
      <exclude name="gr/demokritos/iit/eleon/parser/**"/>
      <exclude name="gr/demokritos/iit/eleon/struct/**"/>
      <exclude name="gr/demokritos/iit/eleon/ui/lang/**"/>
    </javac>
  </target>

  <target name="make-debug-jar" depends="compile"
		description="Create jarfile (with debug info, no hard-wired classapth) from the contents of the classes dir">
	<jar jarfile="./${jarfile}">
		<manifest>
			<attribute name="Built-By" value="Stasinos Konstantopoulos for NCSR Demokritos" />
			<attribute name="Main-Class" value="gr.demokritos.iit.eleon.MainShell" />
		</manifest>
		<fileset dir="${classes.dir}"/>
	</jar>
  </target>

  <target name="distro-linux" depends="make-linux-jar,make-src-zip"
      description="Make a complete Linux distro with binary jar and zipped sources">
    <mkdir dir="${dist.dir}" />
  	<mkdir dir="${dist.lib.dir}"/>
    <copy todir="${dist.lib.dir}"><fileset dir="${lib.dir}"/></copy>
    <copy todir="${dist.dir}"><fileset file="${jarfile}"/></copy>
    <copy todir="${dist.dir}"><fileset file="${sh.dir}"/></copy>
  </target>

  <target name="distro-macos" depends="make-macos-jar,make-src-zip"
	  description="Make a complete MacOS X distro with binary jar and zipped sources">
    <mkdir dir="${dist.dir}" />
  	<mkdir dir="${dist.lib.dir}"/>
    <copy todir="${dist.lib.dir}"><fileset dir="${lib.dir}"/></copy>
    <copy todir="${dist.dir}"><fileset file="${jarfile}"/></copy>
	<copy todir="${dist.dir}"><fileset file="${sh.dir}"/></copy>
  </target>

  <target name="distro-win" depends="make-win-jar,make-src-zip"
	  description="Make a complete Windows distro with binary jar and zipped sources">
    <mkdir dir="${dist.dir}" />
  	<mkdir dir="${dist.lib.dir}"/>
    <copy todir="${dist.lib.dir}"><fileset dir="${lib.dir}"/></copy>
    <copy todir="${dist.dir}"><fileset file="${jarfile}"/></copy>
	<copy todir="${dist.dir}"><fileset file="${bat.dir}"/></copy>
  </target>


  <!-- Internal targets -->
  <!-- ================ -->

  <target name="make-linux-jar" depends="optimise-javac-flags,compile"
      description="Create jarfile (optimized, no debug info) from the contents of the classes dir">
    <manifestclasspath property="jar.classpath" jarfile="${jarfile}">
    	<classpath><fileset refid="linux-libs"/></classpath>
    </manifestclasspath>
    <jar jarfile="${jarfile}">
      <fileset dir="${classes.dir}"/>
      <manifest>
        <attribute name="Class-Path" value="${jar.classpath}" />
      	<attribute name="Built-By" value="Stasinos Konstantopoulos for NCSR Demokritos" />
        <attribute name="Main-Class" value="gr.demokritos.iit.eleon.MainShell" />
      </manifest>  
    </jar>
  </target>

  <target name="make-macos-jar" depends="optimise-javac-flags,compile"
      description="Create jarfile (optimized, no debug info) from the contents of the classes dir">
    <manifestclasspath property="jar.classpath" jarfile="${jarfile}">
    	<classpath><fileset refid="macos-libs"/></classpath>
    </manifestclasspath>
    <jar jarfile="${jarfile}">
      <fileset dir="${classes.dir}"/>
      <manifest>
        <attribute name="Class-Path" value="${jar.classpath}" />
      	<attribute name="Built-By" value="Stasinos Konstantopoulos for NCSR Demokritos" />
        <attribute name="Main-Class" value="gr.demokritos.iit.eleon.MainShell" />
      </manifest>  
    </jar>
  </target>

  <target name="make-win-jar" depends="optimise-javac-flags,compile"
      description="Create jarfile (optimized, no debug info) from the contents of the classes dir">
    <manifestclasspath property="jar.classpath" jarfile="${jarfile}">
    	<classpath><fileset refid="win-libs"/></classpath>
    </manifestclasspath>
    <jar jarfile="${jarfile}">
      <fileset dir="${classes.dir}"/>
      <manifest>
        <attribute name="Class-Path" value="${jar.classpath}" />
      	<attribute name="Built-By" value="Stasinos Konstantopoulos for NCSR Demokritos" />
        <attribute name="Main-Class" value="gr.demokritos.iit.eleon.MainShell" />
      </manifest>  
    </jar>
  </target>

  <target name="optimise-javac-flags"
    description="Set the javac flags that will produce an optimised jar without debug symbols" >
    <property name="java.debug"       value="false"/>
    <property name="java.debuglevel"  value=""/>
    <property name="java.deprecation" value="false"/>
    <property name="java.optimize"    value="true"/>
    <property name="java.source"      value="1.6"/>
    <property name="java.target"      value="1.5"/>
  </target>

  <target name="default-javac-flags"
    description="Set the javac flags that will produce an debug jar with no compiler optimisation and all debug symbols" >
    <!-- Note that in ant, if these flags are already set setting them again has no effect -->
    <property name="java.debug"       value="true"/>
    <property name="java.debuglevel"  value="source,lines,vars"/>
    <property name="java.deprecation" value="false"/>
    <property name="java.optimize"    value="false"/>
    <property name="java.source"      value="1.6"/>
    <property name="java.target"      value="1.6"/>
  </target>

  <target name="make-src-zip">
  	<mkdir dir="${dist.dir}"/>
    <zip zipfile="${dist.dir}/${srczipfile}">
      <fileset dir="${src.dir}"/>
    </zip>
  </target>

</project>
