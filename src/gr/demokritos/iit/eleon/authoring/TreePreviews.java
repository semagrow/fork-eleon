//  "M-PIRO AUTHORING TOOL v.4.4"
//  Copyright (c) 2001, 2002, 2003, 2004
//  Software and Knowledge Engineering Laboratory,
//  Institute of Informatics and Telecommunications,
//  National Centre for Scientific Research "Demokritos", Greece.

package gr.demokritos.iit.eleon.authoring;

import gr.demokritos.iit.eleon.ui.StoriesPanel;
import gr.demokritos.iit.eleon.ui.StoriesTable;
import gr.demokritos.iit.eleon.ui.StoriesTableModel;
import gr.demokritos.iit.eleon.ui.UsersPanel;
import gr.demokritos.iit.eleon.ui.lang.en.EnglishNounPanel;
import gr.demokritos.iit.eleon.ui.lang.en.EnglishVerbPanel;
import gr.demokritos.iit.eleon.ui.lang.gr.GreekNounPanel;
import gr.demokritos.iit.eleon.ui.lang.gr.GreekVerbPanel;
import gr.demokritos.iit.eleon.ui.lang.it.ItalianNounPanel;
import gr.demokritos.iit.eleon.ui.lang.it.ItalianVerbPanel;

import javax.swing.JTree;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.border.*;
import java.util.*;


public class TreePreviews
{
	public static DataBaseTable dbt;
	static DataBaseTableModel dbtm;
	static DataBaseEntityTable dbet;
	static DataBaseEntityTableModel dbetm;
	public static DataBaseNounPanel dbnp;
	static Vector nodeTable;

	static StoriesTable st;
	public static StoriesTableModel stm;
       

	/** The possible previews generated by DataBasePanel.databaseTree
			for the label, the table,
			the htmlPane and the checkBoxList   */

	
        
        
        public static void setDataBaseTable(String nodeName)
	{
                nodeName=QueryHashtable.nameWithoutOccur(nodeName);
		DataBasePanel.multiTable.removeAll();
		DataBasePanel.multiNoun.removeAll();
		DataBasePanel.multiFlagPanel.removeAll();

	if (DataBasePanel.im == DataBasePanel.ICON_TOP ||
		DataBasePanel.im == DataBasePanel.ICON_TOP_B ||
		DataBasePanel.im == DataBasePanel.ICON_BUILT ||
		(nodeName.compareTo("Data Base") == 0))
	{
			DataBasePanel.label01.setText(LangResources.getString(Mpiro.selectedLocale, "clickanEntityOrAnEntityTypeNode_text"));
			//DataBasePanel.showInherited.setVisible(false);		//maria
		}

	// Basic-type or Entity-type view
	else if (DataBasePanel.im == DataBasePanel.ICON_TOP_A ||
			 DataBasePanel.im == DataBasePanel.ICON_BASIC ||
			 DataBasePanel.im == DataBasePanel.ICON_BOOK)
	{
			// The top-label view
			DataBasePanel.label01.setText(nodeName);
			//DataBasePanel.showInherited.setVisible(true);			//maria

			// The table view
			// First: the parent's table vector
			//String parent = DataBasePanel.last.getParent().toString();
                        //parent=QueryHashtable.nameWithoutOccur(parent);
			//NodeVector parentVector = (NodeVector)QueryHashtable.mainDBHashtable.get(parent);
			//Vector parentTable = (Vector)parentVector.elementAt(0);
			// Second: the current node's table vector
			NodeVector nodeVector = (NodeVector)QueryHashtable.mainDBHashtable.get(nodeName);
                        
			
                        
                        nodeTable=QueryHashtable.getPropertiesForType(nodeName);
                        
                        
                        
                        //nodeTable = (Vector)nodeVector.elementAt(0);

			// Make a new "nodeTable" having new FieldData(s) with no text in 4th col!
//	  for (int t = 0; t < nodeTable.size(); t++)
//	  {
//		  FieldData ff = (FieldData)nodeTable.elementAt(t);
//		/*  boolean b;
//		  if (ff.elementAt(2).toString().equalsIgnoreCase("true"))
//		  {
//			  b = true;
//		  }
//		  else
//		  {
//			  b = false;
//		  }*/
//		  FieldData fff = new FieldData(ff.elementAt(0).toString(), ff.elementAt(1).toString(), true, ff.elementAt(3).toString());
//		  nodeTable.setElementAt(fff, t);
//			}
	  // Show the table taking the nodeTable vector and his parentTable vector size
	 	 // int rowLimit = parentTable.size();
                  
                  
 /*         Vector allProp=new Vector(parentTable);
          
          //increase row limit by the number of properties inherited from other parents
          String lastSelected=DataBasePanel.last.toString();
                if(lastSelected.substring(0,lastSelected.length()-1).endsWith("_occur"))
                {
                    lastSelected=lastSelected.substring(0, lastSelected.length()-7);
                }
                
                 Hashtable allEntityTypes = (Hashtable) QueryHashtable.getEntityTypesAndEntitiesHashtableFromMainDBHashtable("Entity type");
                    Enumeration allTypesNames=DataBasePanel.top.preorderEnumeration();
                    while(allTypesNames.hasMoreElements())
                    {//DefaultMutableTreeNode nextNode=null;
                        DefaultMutableTreeNode nextEl=(DefaultMutableTreeNode) allTypesNames.nextElement();
               
                        FieldData property=null;
                         
                        if (nextEl.toString().startsWith(lastSelected+"_occur")){
                            System.out.println("hhhhhhhh"+nextEl.toString());
                           NodeVector multiParent= (NodeVector) QueryHashtable.mainDBHashtable.get(nextEl.getParent().toString());
                           Vector multiParentDatabaseTableVector = multiParent.getDatabaseTableVector();
                            for (int h=8;h<multiParentDatabaseTableVector.size();h++){
                               property = (FieldData) multiParentDatabaseTableVector.elementAt(h);
                               if (!(allProp.contains(property))) {
                                   rowLimit++;
                                   System.out.println("prop"+property.toString());
                               allProp.add(property);
                               }
                               }
                            
                                
          */                          
                                    
                                    /* NodeVector entityTypeParentNode = (NodeVector) QueryHashtable.mainDBHashtable.get(nextNode.toString());
                             Vector parentDatabaseTableVector = entityTypeParentNode.getDatabaseTableVector();
                              FieldData property=null;
                             for (int h=parentDatabaseTableVector.size();h>0;h--){
                             property = (FieldData) parentDatabaseTableVector.elementAt(h-1);
                             if (property.m_field.equalsIgnoreCase(row.m_field)) break;
                                     
                                     parentTable
                                     */
                                    
                            
                      //  }
          
          
         //           }
                            
                            
                            
          
	  dbtm = new DataBaseTableModel(nodeTable, 1);
	  /*if(!(DataBasePanel.showInherited.isSelected()))
	  {
		  for(int i=0;i<dbtm2.getRowCount();i++)
		  {
			  if(!(dbtm2.isCellEditable(i,0)))
			  {dbtm2.delete(i);}
		  }
		  dbt = new DataBaseTable(dbtm2, 0);
	  }
	  else
	  {	*/
	  dbt = new DataBaseTable(dbtm, 1);//}

	  // The noun panel view
	  dbnp = new DataBaseNounPanel();  // an empty DataBaseNounPanel
	  dbnp.nounLabel.setText(LangResources.getString(Mpiro.selectedLocale, "nounsThatCanBeUsedToDescribe_text") +
							 " \"" + nodeName + "\"");
	  Vector currentNouns = (Vector)nodeVector.elementAt(2);
	  dbnp.nounSelected.updateNouns(currentNouns);

	  //DataBasePanel.multiTable.removeAll();

	  // Put them all in place and repaint UI components
	  DataBasePanel.multiTable.add(dbt);
	  DataBasePanel.multiNoun.add(dbnp);
		}

	// Entity view
	else if (DataBasePanel.im == DataBasePanel.ICON_GEI || DataBasePanel.im == DataBasePanel.ICON_GENERIC)
	{
		// The top-label view
		DataBasePanel.label01.setText(
						LangResources.getString(Mpiro.selectedLocale, "languageIndependentFieldsOf_text")
						+ " \"" + nodeName + "\"");
			// DataBasePanel.showInherited.setVisible(false);		//maria

			// The flag-panel view
			DataBasePanel.multiFlagPanel.add("Center", new FlagPanel(1));

			// The table view (the language-independent instance is the default)
			NodeVector nodeVector = (NodeVector)QueryHashtable.mainDBHashtable.get(nodeName);
                       // System.out.println("GGFDFDDFFF"+QueryHashtable.mainDBHashtable.get(nodeName));
			nodeTable = (Vector)nodeVector.elementAt(0);  // THIS VECTOR CONTAINS 4 TABLE VECTORS:
			// 1. LANGUAGE INDEPENDENT FIELDS TABLE
			// 2. ENGLISH FIELDS TABLE
			// 3. ITALIAN FIELDS TABLE
			// 4. FRENCH FIELDS TABLE
			Vector indep = (Vector)nodeTable.elementAt(0);
                        
                        

	  dbetm = new DataBaseEntityTableModel(indep, true);
         // System.out.println("DDDDDDDd"+dbetm.);
	  dbet = new DataBaseEntityTable(dbetm);

	  DataBasePanel.multiTable.add(dbet);
		}
	DataBasePanel.multiTable.revalidate();
	DataBasePanel.multiTable.repaint();
	DataBasePanel.multiNoun.revalidate();
	DataBasePanel.multiNoun.repaint();
	} // setDataBaseTable()
        
        
        public static void setDataBaseTable(String nodeName,String parent)
	{
                nodeName=QueryHashtable.nameWithoutOccur(nodeName);
                parent=QueryHashtable.nameWithoutOccur(parent);
		DataBasePanel.multiTable.removeAll();
		DataBasePanel.multiNoun.removeAll();
		DataBasePanel.multiFlagPanel.removeAll();

	if (DataBasePanel.im == DataBasePanel.ICON_TOP ||
		DataBasePanel.im == DataBasePanel.ICON_TOP_B ||
		DataBasePanel.im == DataBasePanel.ICON_BUILT ||
		(nodeName.compareTo("Data Base") == 0))
	{
			DataBasePanel.label01.setText(LangResources.getString(Mpiro.selectedLocale, "clickanEntityOrAnEntityTypeNode_text"));
			//DataBasePanel.showInherited.setVisible(false);		//maria
		}

	// Basic-type or Entity-type view
	else if (DataBasePanel.im == DataBasePanel.ICON_TOP_A ||
			 DataBasePanel.im == DataBasePanel.ICON_BASIC ||
			 DataBasePanel.im == DataBasePanel.ICON_BOOK)
	{
			// The top-label view
			DataBasePanel.label01.setText(nodeName);
			//DataBasePanel.showInherited.setVisible(true);			//maria

			// The table view
			// First: the parent's table vector
			//String parent = DataBasePanel.last.getParent().toString();
			//NodeVector parentVector = (NodeVector)QueryHashtable.mainDBHashtable.get(parent);
			//Vector parentTable = (Vector)parentVector.elementAt(0);
			// Second: the current node's table vector
			NodeVector nodeVector = (NodeVector)QueryHashtable.mainDBHashtable.get(nodeName);
			nodeTable = (Vector)nodeVector.elementAt(0);

			// Make a new "nodeTable" having new FieldData(s) with no text in 4th col!
	  for (int t = 0; t < nodeTable.size(); t++)
	  {
		  FieldData ff = (FieldData)nodeTable.elementAt(t);
		/*  boolean b;
		  if (ff.elementAt(2).toString().equalsIgnoreCase("true"))
		  {
			  b = true;
		  }
		  else
		  {
			  b = false;
		  }*/
		  FieldData fff = new FieldData(ff.elementAt(0).toString(), ff.elementAt(1).toString(), true, ff.elementAt(3).toString());
		  nodeTable.setElementAt(fff, t);
			}
	  // Show the table taking the nodeTable vector and his parentTable vector size
	 // int rowLimit = parentTable.size();
	  dbtm = new DataBaseTableModel(nodeTable, 1);
	  /*if(!(DataBasePanel.showInherited.isSelected()))
	  {
		  for(int i=0;i<dbtm2.getRowCount();i++)
		  {
			  if(!(dbtm2.isCellEditable(i,0)))
			  {dbtm2.delete(i);}
		  }
		  dbt = new DataBaseTable(dbtm2, 0);
	  }
	  else
	  {	*/
	  dbt = new DataBaseTable(dbtm, 1);//}

	  // The noun panel view
	  dbnp = new DataBaseNounPanel();  // an empty DataBaseNounPanel
	  dbnp.nounLabel.setText(LangResources.getString(Mpiro.selectedLocale, "nounsThatCanBeUsedToDescribe_text") +
							 " \"" + nodeName + "\"");
	  Vector currentNouns = (Vector)nodeVector.elementAt(2);
	  dbnp.nounSelected.updateNouns(currentNouns,parent);

	  //DataBasePanel.multiTable.removeAll();

	  // Put them all in place and repaint UI components
	  DataBasePanel.multiTable.add(dbt);
	  DataBasePanel.multiNoun.add(dbnp);
		}

	// Entity view
	else if (DataBasePanel.im == DataBasePanel.ICON_GEI ||
			 DataBasePanel.im == DataBasePanel.ICON_GENERIC)
	{
		// The top-label view
		DataBasePanel.label01.setText(
						LangResources.getString(Mpiro.selectedLocale, "languageIndependentFieldsOf_text")
						+ " \"" + nodeName + "\"");
			// DataBasePanel.showInherited.setVisible(false);		//maria

			// The flag-panel view
			DataBasePanel.multiFlagPanel.add("Center", new FlagPanel(1));

			// The table view (the language-independent instance is the default)
			NodeVector nodeVector = (NodeVector)QueryHashtable.mainDBHashtable.get(nodeName);
			nodeTable = (Vector)nodeVector.elementAt(0);  // THIS VECTOR CONTAINS 4 TABLE VECTORS:
			// 1. LANGUAGE INDEPENDENT FIELDS TABLE
			// 2. ENGLISH FIELDS TABLE
			// 3. ITALIAN FIELDS TABLE
			// 4. FRENCH FIELDS TABLE
			Vector indep = (Vector)nodeTable.elementAt(0);

	  dbetm = new DataBaseEntityTableModel(indep, true);
	  dbet = new DataBaseEntityTable(dbetm);

	  DataBasePanel.multiTable.add(dbet);
		}
	DataBasePanel.multiTable.revalidate();
	DataBasePanel.multiTable.repaint();
	DataBasePanel.multiNoun.revalidate();
	DataBasePanel.multiNoun.repaint();
	} //


	public static void entityPreview(String entityName, String generatedText)
	{
            entityName=QueryHashtable.nameWithoutOccur(entityName);
	  DataBasePanel.previewPanel.removeAll();
	  ViewPanel vp = null;

	  Vector entityVector = (Vector)QueryHashtable.mainDBHashtable.get(entityName);
	  Vector entityTablesVector = (Vector)entityVector.get(0);

	  // find the "title" and "notes" for the entity (current language)
	  String titleString = "";
	  String notesString = "";
	  Vector entityDatabaseVector = (Vector)entityVector.get(0);
	  if (Mpiro.activatedPreviewLanguage.equalsIgnoreCase("ENGLISH"))
	  {
			Vector languageEntityVector = (Vector)entityDatabaseVector.get(1);
			Vector titleVector = (Vector)languageEntityVector.get(0);
			Vector notesVector = (Vector)languageEntityVector.get(3);
			titleString = titleVector.get(1).toString();
			notesString = notesVector.get(1).toString();
			if (notesString.length() == 0)
			{
				notesString = "No notes";
			}
			if (notesString.length() == 0)
			{
				titleString = "No title";
			}
		}
		else if (Mpiro.activatedPreviewLanguage.equalsIgnoreCase("ITALIAN"))
		{
			Vector languageEntityVector = (Vector)entityDatabaseVector.get(2);
			Vector titleVector = (Vector)languageEntityVector.get(0);
			Vector notesVector = (Vector)languageEntityVector.get(5);
			titleString = titleVector.get(1).toString();

			notesString = notesVector.get(1).toString();
			if (notesString.length() == 0)
			{
				notesString = "Senza commento";
			}
			if (titleString.length() == 0)
			{
				titleString = "Senza titolo";
			}
		}
		else if (Mpiro.activatedPreviewLanguage.equalsIgnoreCase("GREEK"))
		{
			Vector languageEntityVector = (Vector)entityDatabaseVector.get(3);
			Vector titleVector = (Vector)languageEntityVector.get(0);
			Vector notesVector = (Vector)languageEntityVector.get(9);
			titleString = titleVector.get(1).toString();
			notesString = notesVector.get(1).toString();
			if (notesString.length() == 0)
			{
				notesString = "Χωρίς Σχόλια";
			}
			if (titleString.length() == 0)
			{
				titleString = "Χωρίς τίτλο";
			}
		}

		// find the image picture for the entity
		Vector entityIndependentTableVector = (Vector)entityTablesVector.get(0);
		Vector entityImagesVector = (Vector)entityIndependentTableVector.get(2);

		String imagesString = entityImagesVector.get(1).toString();
		ImageIcon selectedImageIcon;
		if (imagesString.startsWith("<"))
		{
		  String selectedImage = imagesString.substring(1, imagesString.indexOf(">"));
		  selectedImageIcon = new ImageIcon(System.getProperty("user.dir") + "/pictures/" + selectedImage);
		}
		else
		{
		  selectedImageIcon = DataBasePanel.ICON_MPIRO;
		}

		String[] stringArgs = {titleString, generatedText, notesString};
		vp = new ViewPanel(selectedImageIcon,stringArgs,10);

		JScrollPane jsp = new JScrollPane(vp);
		DataBasePanel.previewPanel.add("Center", jsp);
		DataBasePanel.previewPanel.revalidate();
		DataBasePanel.previewPanel.repaint();
	}



	/*  old //
	String h = null;

	DataBasePanel.previewPanel.removeAll();
	DataBasePanel.previewPanel.add("Center", DataBasePanel.htmlView);

	if (i == 1)
	{
	 DataBasePanel.htmlPane.removeAll();
	 DataBasePanel.htmlPane.setText(h =
		  "<HTML>" +
		 "<BODY bgcolor=#FCFCFC>" +
		 "<table height=115 border=0><tr><td>" +
		 "<img src=img/hadra.jpg></td><td>"+
		 "<font face=verdana size=2>"+
		 "This is a preview of " + "\"" + s + "\"" +
		 "<br><br>"+
		 "This exhibit is a hydria-hadra. "+
		 "Today it is located in the Archaeological Museum of Rhodes, "+
		 "which is in Greece. It was created during the hellenistic period "+
		 "and originates from Rhodes."+
		   "</td></tr></table>" +
		 "</BODY></HTML>");
	}
	if (i == 2)
	{
	 DataBasePanel.htmlPane.removeAll();
	 DataBasePanel.htmlPane.setText(h =
		  "<HTML><BODY bgcolor=#FCFCFC>" +
		 "<table height=115 border=0><tr><td>" +
		 "<img src=img/hadra.jpg></td><td>"+
		 "<font face=verdana size=2>"+
		 "Questo &#232; una preispezione di " + "\"" + s + "\"" +
		 "<br><br>"+
		 "Questo reperto e' un'idria Hadra. "+
		 "Oggi &#232; conservata al Museo Archeologico di Rhodes, "+
		 "che si trova in Grecia. Fu creata durante il periodo ellenico "+
		 "e proviene da Rodi."+
		   "</td></tr></table>" +
		 "</BODY></HTML>");
	}
	if (i == 3)
	{
	 DataBasePanel.htmlPane.removeAll();
	 DataBasePanel.htmlPane.setText(h =
		  "<HTML><BODY bgcolor=#FCFCFC>" +
		 "<HEAD><meta http-equiv=Content-Type content=text/html; charset=iso-8859-7></HEAD>" +
		 "<table height=115 border=0><tr><td>" +
		 "<img src=img/hadra.jpg></td><td>" +
		 "<font face=verdana size=2>"+
		 "������� ��� ������������� ��� " + "\"" + s + "\"" +
		 "<br><br>"+
		 "���� �� ������ ����� ��� ����� Hadra. "+
		 "������ ��������� ��� ������������ ������� �����, "+
		 "��� ����� ���� ������. ������������� ���� �� �������� "+
		 "��� ������������ �������� ��� ���������� ��� �� ����."+
		   "</td></tr></table>" +
		 "</BODY></HTML>");
	}

	DataBasePanel.previewPanel.revalidate();
	DataBasePanel.previewPanel.repaint();
	*/

	//}

	public static void generalDataBasePreview()
	{
		String h = null;

		DataBasePanel.previewPanel.removeAll();

		ViewPanel vp = new ViewPanel(DataBasePanel.ICON_MPIRO, LangResources.getString(Mpiro.selectedLocale, "textPreviewArea_text"), 14);
		JScrollPane jsp = new JScrollPane(vp);
		DataBasePanel.previewPanel.add("Center", jsp);
		DataBasePanel.previewPanel.revalidate();
		DataBasePanel.previewPanel.repaint();

		/*  old //
		try
		{
		DataBasePanel.htmlPane.setText(h =
			 "<HTML><BODY bgcolor=#FCFCFC>" +
			"<table height=115 border=0><tr><td>" +
			"<img src=img/mpiro.gif></td><td>" +
			"<font face=verdana size=4>" +
			"Text preview area " +
			  "</td></tr></table>" +
			"</BODY></HTML>");
		}
		catch (Exception ex)
		{
			 System.err.println("Couldn't create help URL: " + h);
		 }

		DataBasePanel.previewPanel.add("Center", DataBasePanel.htmlView);
		DataBasePanel.previewPanel.revalidate();
		DataBasePanel.previewPanel.repaint();
		*/
	}  // generalDataBasePreview()



	/** The possible previews generated by LexTree
		 to the multiPanel of the LexiconPanel  */
	public static void setLexPanel()
	{
	  if ((LexiconPanel.im == LexiconPanel.ICON_EN) && (LexiconPanel.parentim == LexiconPanel.ICON_N))
	  {
			LexiconPanel.multipanel.removeAll();
			EnglishNounPanel enp = new EnglishNounPanel();
			JScrollPane englishNounPanelScroll = new JScrollPane(enp);
			LexiconPanel.multipanel.add("Center", englishNounPanelScroll);
		}
		else if ((LexiconPanel.im == LexiconPanel.ICON_IT) && (LexiconPanel.parentim == LexiconPanel.ICON_N))
		{
			LexiconPanel.multipanel.removeAll();
			ItalianNounPanel inp = new ItalianNounPanel();
			JScrollPane italianNounPanelScroll = new JScrollPane(inp);
			LexiconPanel.multipanel.add("Center", italianNounPanelScroll);
		}
		else if ((LexiconPanel.im == LexiconPanel.ICON_GR) && (LexiconPanel.parentim == LexiconPanel.ICON_N))
		{
			LexiconPanel.multipanel.removeAll();
			GreekNounPanel gnp = new GreekNounPanel();
			JScrollPane greekNounPanelScroll = new JScrollPane(gnp);
			LexiconPanel.multipanel.add("Center", greekNounPanelScroll);
		}
		else if ((LexiconPanel.im == LexiconPanel.ICON_EN) && (LexiconPanel.parentim == LexiconPanel.ICON_V))
		{
			LexiconPanel.multipanel.removeAll();
			EnglishVerbPanel evp = new EnglishVerbPanel();
			JScrollPane englishVerbPanelScroll = new JScrollPane(evp);
			LexiconPanel.multipanel.add("Center", englishVerbPanelScroll);
		}
		else if ((LexiconPanel.im == LexiconPanel.ICON_IT) && (LexiconPanel.parentim == LexiconPanel.ICON_V))
		{
			LexiconPanel.multipanel.removeAll();
			ItalianVerbPanel ivp = new ItalianVerbPanel();
			JScrollPane italianVerbPanelScroll = new JScrollPane(ivp);
			LexiconPanel.multipanel.add("Center", italianVerbPanelScroll);
		}
		else if ((LexiconPanel.im == LexiconPanel.ICON_GR) && (LexiconPanel.parentim == LexiconPanel.ICON_V))
		{
			LexiconPanel.multipanel.removeAll();
			GreekVerbPanel gvp = new GreekVerbPanel();
			JScrollPane greekVerbPanelScroll = new JScrollPane(gvp);
			LexiconPanel.multipanel.add("Center", greekVerbPanelScroll);
		}
		else if ((LexiconPanel.im == LexiconPanel.ICON_N)) //|| (LexiconPanel.im == LexiconPanel.ICON_V))
		{
			LexiconPanel.multipanel.removeAll();
			IndependentLexiconPanel ilp = new IndependentLexiconPanel();
			JScrollPane independentLexiconPanelScroll = new JScrollPane(ilp);
			LexiconPanel.multipanel.add("Center", independentLexiconPanelScroll);
		}
		else if (LexiconPanel.im == LexiconPanel.ICON_V)
		{
			LexiconPanel.multipanel.removeAll();
		}

		else if (//(LexiconPanel.im == LexiconPanel.ICON_N) ||
						(LexiconPanel.im == LexiconPanel.ICON_L) ||
						//(LexiconPanel.im == LexiconPanel.ICON_V) ||
						(LexiconPanel.im == LexiconPanel.ICON_VERB) ||
						(LexiconPanel.im == LexiconPanel.ICON_NOUN))
		{
			LexiconPanel.multipanel.removeAll();
		}
	  LexiconPanel.multipanel.revalidate();
	  LexiconPanel.multipanel.repaint();
	}


	/** The possible previews generated by LexTree
			to the multiPanel of the LexiconPanel  */
	public static void setUsersPanel(String text)
	{
		if (UsersPanel.im == UsersPanel.ICON_USER)
		{
			UsersPanel.multipanel.removeAll();
			UsersPanel.label01.setText("  " + text);

			String node = UsersPanel.last.toString();
			Vector userVector = (Vector)QueryUsersHashtable.mainUsersHashtable.get(node);
			Integer attribute1 = new Integer(userVector.get(0).toString());
			Integer attribute2 = new Integer(userVector.get(1).toString());
			Integer attribute3 = new Integer(userVector.get(2).toString());
			String attribute4 = userVector.get(3).toString();
			UsersPanel.multipanel.add("North", UsersPanel.theFourPanels);

                        UsersPanel.setPersonalityValues(attribute1, attribute2, attribute3, attribute4);
			//UsersPanel.maxFactsCombo.setSelectedItem(attribute1);
			//UsersPanel.factsPerPageCombo.setSelectedItem(attribute2);
			//UsersPanel.linksPerPageCombo.setSelectedItem(attribute3);
			//UsersPanel.synthVoiceCombo.setSelectedItem(attribute4);

			UsersPanel.multipanel.revalidate();
			UsersPanel.multipanel.repaint();
		}
                else if(UsersPanel.im == UsersPanel.ICON_ROBOTBRAIN){
                    UsersPanel.multipanel.removeAll();
                    UsersPanel.label01.setText("Edit Profile Attributes");
                    UsersPanel.multipanel.add(UsersPanel.robotsChar);
                        UsersPanel.robotsChar.setVisible(true);
                        UsersPanel.robotsChar.repaint();
                }
                else if (UsersPanel.im == UsersPanel.ICON_ROBOT){
                    UsersPanel.multipanel.removeAll();
			UsersPanel.label01.setText("  " + text);

			String node = UsersPanel.last.toString();
			Vector robotsVector = (Vector)QueryUsersHashtable.robotsHashtable.get(node);
			Integer attribute1 = new Integer(robotsVector.get(0).toString());
			Integer attribute2 = new Integer(robotsVector.get(1).toString());
			Integer attribute3 = new Integer(robotsVector.get(2).toString());
			Integer attribute4 = new Integer(robotsVector.get(3).toString());
                        Integer attribute5 = new Integer(robotsVector.get(4).toString());
			UsersPanel.multipanel.add("North", UsersPanel.theFivePanels);
                        
                        
                        
                        UsersPanel.openness.setValue(attribute1);
        UsersPanel.conscientiousness.setValue(attribute2);
         UsersPanel.extraversion.setValue(attribute3);
         UsersPanel.agreeableness.setValue(attribute4);
        UsersPanel.naturalReactions.setValue(attribute5);
		//	UsersPanel.maxFactsCombo.setSelectedItem(attribute1);
		//	UsersPanel.factsPerPageCombo.setSelectedItem(attribute2);
		//	UsersPanel.linksPerPageCombo.setSelectedItem(attribute3);
			//UsersPanel.synthVoiceCombo.setSelectedItem(attribute4);

			UsersPanel.multipanel.revalidate();
			UsersPanel.multipanel.repaint();
                }
		else if (UsersPanel.im == UsersPanel.ICON_USERS || UsersPanel.im == UsersPanel.ICON_ROBOTS)
		{
			UsersPanel.label01.setText(LangResources.getString(Mpiro.selectedLocale, "clickTheHierarchyToYourLeft_text"));
			UsersPanel.multipanel.removeAll();
                        UsersPanel.multipanel.revalidate();
		UsersPanel.multipanel.repaint();
		}
		
	}


	/** The possible previews generated by StoriesTree
			for the label, the table,
			and the JTextPane */
	public static void setStoriesTable(String text)
	{
		StoriesPanel.multiPanel.removeAll();

		if (StoriesPanel.im == DataBasePanel.ICON_TOP ||
				StoriesPanel.im == DataBasePanel.ICON_TOP_A)
		{
		StoriesPanel.label01.setText(LangResources.getString(Mpiro.selectedLocale, "clickanEntityOrAnEntityTypeNode_text"));
		}
		else
		{
			StoriesPanel.label01.setText("  " + text);

			String node = StoriesPanel.last.toString();
			NodeVector nodeVector = (NodeVector)QueryHashtable.mainDBHashtable.get(node);
			Vector storiesVector = (Vector)nodeVector.elementAt(3);
			//System.out.println("\n" + node + storiesVector); /////////////////////

			Hashtable englishValues = (Hashtable)storiesVector.elementAt(0);// it could be italian or greekValues

			Vector fieldVector = new Vector(); // which will be filled with hashtable's keys
			Enumeration enumer = englishValues.keys();
			while (enumer.hasMoreElements())
			{
				fieldVector.addElement(enumer.nextElement());
			}

			Vector sortedFields = (Vector)QuickSort.quickSort(0, fieldVector.size()-1, fieldVector);
			//System.out.println("\n" + sortedFields); //////////////////////

			Vector tableVector = new Vector();
			for (int a = 0; a < sortedFields.size(); a++)
			{
				//FieldData f = new FieldData(sortedFields.elementAt(a).toString(), "");
				String fieldName = sortedFields.elementAt(a).toString();
				FieldData f = new FieldData(sortedFields.elementAt(a).toString(), LangCombo.updateStoriesIndex(fieldName));
				tableVector.addElement(f);
			}
	  //System.out.println("\n" + tableVector); //////////////////////

	  stm = new StoriesTableModel(tableVector);
	  st = new StoriesTable(stm);

	  StoriesPanel.multiPanel.add("Center", st);
		}
	  StoriesPanel.multiPanel.revalidate();
	  StoriesPanel.multiPanel.repaint();
	} // setStoriesTable()


	public static void generalStoryPreview()
	{
		StoriesPanel.previewPanel.removeAll();

		ViewPanel vp = new ViewPanel(DataBasePanel.ICON_MPIRO, LangResources.getString(Mpiro.selectedLocale, "storyPreviewArea_text"), 14);
		JScrollPane jsp = new JScrollPane(vp);
		StoriesPanel.previewPanel.add("Center", jsp);
		StoriesPanel.previewPanel.revalidate();
		StoriesPanel.previewPanel.repaint();

		/* old //
		String h = null;

		StoriesPanel.previewPanel.removeAll();

		try
		{
		  StoriesPanel.htmlPane.setText(h =
			  "<HTML><BODY bgcolor=#FCFCFC>" +
			 "<table height=115 border=0><tr><td>" +
			 "<img src=img/mpiro.gif></td><td>" +
			 "<font face=verdana size=4>" +
			 "Story preview area " +
			   "</td></tr></table>" +
			 "</BODY></HTML>");
		}
		catch (Exception ex)
		{
			 System.err.println("Couldn't create story URL: " + h);
		 }

		StoriesPanel.previewPanel.add("Center", StoriesPanel.htmlScroll);
		StoriesPanel.previewPanel.revalidate();
		StoriesPanel.previewPanel.repaint();
		*/

	}  // generalStoriesPreview()



	public static void generalUsersPreview()
	{
		UsersPanel.label01.setText("");
		UsersPanel.multipanel.removeAll();
		UsersPanel.multipanel.revalidate();
		UsersPanel.multipanel.repaint();
	} // generalUsersPreview()


	public static void setDataBaseTableAfterSearch(String nodeName, DefaultMutableTreeNode currentNode, boolean isEntityType)
	{
            nodeName=QueryHashtable.nameWithoutOccur(nodeName);
            currentNode=DataBasePanel.getNode(QueryHashtable.nameWithoutOccur(currentNode.toString()));
		DataBasePanel.last = currentNode;

		DataBasePanel.multiTable.removeAll();
		DataBasePanel.multiNoun.removeAll();
		DataBasePanel.multiFlagPanel.removeAll();

		if (nodeName.compareTo("Data Base") == 0)
		{
			DataBasePanel.label01.setText(LangResources.getString(Mpiro.selectedLocale, "clickanEntityOrAnEntityTypeNode_text"));
		}
	// Basic-type or Entity-type view
	else if (isEntityType)
	{
		// The top-label view
		DataBasePanel.label01.setText(nodeName);

		// The table view
		// First: the parent's table vector
		//String parent = DataBasePanel.last.getParent().toString();
		//NodeVector parentVector = (NodeVector)QueryHashtable.mainDBHashtable.get(parent);
		//Vector parentTable = (Vector)parentVector.elementAt(0);
		// Second: the current node's table vector
		NodeVector nodeVector = (NodeVector)QueryHashtable.mainDBHashtable.get(nodeName);
		nodeTable = (Vector)nodeVector.elementAt(0);

		// Make a new "nodeTable" having new FieldData(s) with no text in 4th col!
		for (int t = 0; t < nodeTable.size(); t++)
		{
				FieldData ff = (FieldData)nodeTable.elementAt(t);
				boolean b;
				if (ff.elementAt(2).toString().equalsIgnoreCase("true"))
				{
					b = true;
				}
				else
				{
					b = false;
				}
				FieldData fff = new FieldData(ff.elementAt(0).toString(), ff.elementAt(1).toString(), b, ff.elementAt(3).toString());
				nodeTable.setElementAt(fff, t);
			}

			// Show the table taking the nodeTable vector and his parentTable vector size
			//int rowLimit = parentTable.size();
			dbtm = new DataBaseTableModel(nodeTable, 1);
			dbt = new DataBaseTable(dbtm, 1);

			// The noun panel view
			dbnp = new DataBaseNounPanel();  // an empty DataBaseNounPanel
			dbnp.nounLabel.setText(LangResources.getString(Mpiro.selectedLocale, "nounsThatCanBeUsedToDescribe_text") +
											   " \"" + nodeName + "\"");
			Vector currentNouns = (Vector)nodeVector.elementAt(2);
			dbnp.nounSelected.updateNouns(currentNouns);

			//DataBasePanel.multiTable.removeAll();

			// Put them all in place and repaint UI components
			DataBasePanel.multiTable.add(dbt);
			DataBasePanel.multiNoun.add(dbnp);
		}

	// Entity view
	else
	{
		// The top-label view
		DataBasePanel.label01.setText(LangResources.getString(Mpiro.selectedLocale, "languageIndependentFieldsOf_text")
													+ " \"" + nodeName + "\"");

	  // The flag-panel view
	  DataBasePanel.multiFlagPanel.add("Center", new FlagPanel(1));

	  // The table view (the language-independent instance is the default)
	  NodeVector nodeVector = (NodeVector)QueryHashtable.mainDBHashtable.get(nodeName);
	  nodeTable = (Vector)nodeVector.elementAt(0);  // THIS VECTOR CONTAINS 4 TABLE VECTORS:
	  // 1. LANGUAGE INDEPENDENT FIELDS TABLE
	  // 2. ENGLISH FIELDS TABLE
	  // 3. ITALIAN FIELDS TABLE
	  // 4. FRENCH FIELDS TABLE
	  Vector indep = (Vector)nodeTable.elementAt(0);

	  dbetm = new DataBaseEntityTableModel(indep, true);
	  dbet = new DataBaseEntityTable(dbetm);

	  DataBasePanel.multiTable.add(dbet);
		}
	DataBasePanel.multiTable.revalidate();
	DataBasePanel.multiTable.repaint();
	DataBasePanel.multiNoun.revalidate();
	DataBasePanel.multiNoun.repaint();
	} // setDataBaseTable()

} // class TreePreviews
