/* Generated By:JavaCC: Do not edit this line. ClassParser.java */
package gr.demokritos.iit.eleon.parser;

import com.hp.hpl.jena.ontology.*;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import java.io.StringReader;

import gr.demokritos.iit.eleon.authoring.OwlExport;

public class ClassParser implements ClassParserConstants {

static private OntModel ontModel;
static private String mpiroNS;

  public static Resource parsing(String input, OntModel ontModel, String mpiroNS) throws ParseException {
    ClassParser parser  = new ClassParser(new StringReader(input));
    parser.ontModel = ontModel;
    parser.mpiroNS=mpiroNS;
    Resource oc=parser.ExpressionList();
    return(oc);
  }

  final public Resource ExpressionList() throws ParseException {
        //OntClass cl=ontModel.createResource();
Resource an=ontModel.createResource();

    an = classExpression();

    jj_consume_token(0);
        {if (true) return(an);}
    throw new Error("Missing return statement in function");
  }

  final public Resource classExpression() throws ParseException {
Token temp,num;
Token ind=null;
Resource tempClass=ontModel.createResource();
Resource cl=ontModel.createResource();
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        cl = classorunionorintersection();
        break;
      case 10:
        jj_consume_token(10);
        tempClass = classExpression();
cl=ontModel.createComplementClass(null,tempClass);
        break;
      case 11:
        jj_consume_token(11);
        temp = jj_consume_token(PROP);
        tempClass = classExpression();
  cl=ontModel.createSomeValuesFromRestriction(null, ontModel.getProperty(OwlExport.getNSFor(temp.image.replace("Property:",""), mpiroNS)), tempClass);
        break;
      case 12:
        jj_consume_token(12);
        temp = jj_consume_token(PROP);
        ind = jj_consume_token(IND);
cl=ontModel.createHasValueRestriction(null, ontModel.getProperty(OwlExport.getNSFor(temp.image.replace("Property:",""), mpiroNS)), ontModel.getIndividual(OwlExport.getNSFor(ind.image.replace("Individual:",""), mpiroNS)));
        break;
      case 13:
        jj_consume_token(13);
        temp = jj_consume_token(PROP);
        tempClass = classExpression();
cl=ontModel.createAllValuesFromRestriction(null, ontModel.getProperty(OwlExport.getNSFor(temp.image.replace("Property:",""), mpiroNS)), tempClass);
        break;
      case 14:
        jj_consume_token(14);
        num = jj_consume_token(NUM);
        temp = jj_consume_token(PROP);
cl=ontModel.createMinCardinalityRestriction(null, ontModel.getProperty(OwlExport.getNSFor(temp.image.replace("Property:",""), mpiroNS)) , Integer.parseInt(num.image));
        break;
      case 15:
        jj_consume_token(15);
        num = jj_consume_token(NUM);
        temp = jj_consume_token(PROP);
cl=ontModel.createCardinalityRestriction(null, ontModel.getProperty(OwlExport.getNSFor(temp.image.replace("Property:",""), mpiroNS)) , Integer.parseInt(num.image));
        break;
      case 16:
        jj_consume_token(16);
        num = jj_consume_token(NUM);
        temp = jj_consume_token(PROP);
cl=ontModel.createMaxCardinalityRestriction(null, ontModel.getProperty(OwlExport.getNSFor(temp.image.replace("Property:",""), mpiroNS)) , Integer.parseInt(num.image));
        break;
      case 17:
        jj_consume_token(17);
        temp = jj_consume_token(IND);
                  cl=ontModel.createEnumeratedClass(null, ontModel.createList(new RDFNode[] {ontModel.getIndividual(OwlExport.getNSFor(temp.image.replace("Individual:",""), mpiroNS))}));
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 18:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(18);
          temp = jj_consume_token(IND);
                                                                                                                                                                                                              ((EnumeratedClass) cl).addOneOf(ontModel.getIndividual(OwlExport.getNSFor(temp.image.replace("Individual:",""), mpiroNS)));
        }
        jj_consume_token(19);
        break;
      case CLASS:
        temp = jj_consume_token(CLASS);
        ExtendedIterator tttt=ontModel.listClasses();
        while(tttt.hasNext()){
            System.out.println(tttt.next().toString());
        }
                cl=ontModel.getOntClass(OwlExport.getNSFor(temp.image.replace("Class:",""), mpiroNS));
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(20);
        {if (true) return(cl);}
    throw new Error("Missing return statement in function");
  }

  final public Resource classorunionorintersection() throws ParseException {
Resource t1=ontModel.createResource();
Resource t2=ontModel.createResource();
Resource cl=ontModel.createResource();
Token type=new Token();
    t1 = classExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
    case 22:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        type = jj_consume_token(21);
        break;
      case 22:
        type = jj_consume_token(22);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    t2 = classExpression();
if (type.image.equalsIgnoreCase("\u222a"))
cl=ontModel.createUnionClass(null, ontModel.createList(new RDFNode[] {t1,t2}));
else
cl=ontModel.createIntersectionClass(null, ontModel.createList(new RDFNode[] {t1,t2}));

{if (true) return(cl);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ClassParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x3fe40,0x3fe40,0x600000,0x600000,};
   }

  /** Constructor with InputStream. */
  public ClassParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ClassParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ClassParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ClassParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ClassParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ClassParser(ClassParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ClassParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
